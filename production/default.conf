upstream client {
    server client:3000;
}

upstream api {
    server server:8080;
}

# upstream pgadmin {
#     server pgadmin:5050;
# }

# server {
#     listen 80;

#     location / {
#         proxy_pass http://client;
#     }

#     location /sockjs-node {
#         proxy_pass http://client;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "Upgrade";
#     }

#     location /api {
#         rewrite /api/(.*) /$1 break;
#         proxy_pass http://api;
#     }
# }

#production
server {
    listen 80;
    server_name ec2-18-189-18-248.us-east-2.compute.amazonaws.com;
    # server_name localhost;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name ec2-18-189-18-248.us-east-2.compute.amazonaws.com;
    # server_name localhost;
    ssl_certificate       certs/devopsbyexample.pem;
    ssl_certificate_key   certs/devopsbyexample-key.pem;
    # ssl_certificate /certs/ssl_certificate.crt;
    # ssl_certificate_key /certs/ssl_certificate.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://client;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location /api {
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
